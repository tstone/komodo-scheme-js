function log(s) { console.log(s); }
function trim(s) { return s.replace(/^\s*|\s*$/,''); };
var fs = require('fs');


/* ================================================================
  Color
  An object for understanding and manipulating KSF color values
  =============================================================== */

exports.Color = function(ksfColorValue) { this.__init(ksfColorValue); };

(function(obj, undefined){

    obj.__init = function(ksfColorValue) {
        this.__ksf = ksfColorValue;
    };
    
    obj.toBGR = function() {
        return parseInt(this.__ksf);
    };
    
    obj.toHex = function() {
        var h = this.toBGR().toString(16);
        while (h.length < 6) { h = '0' + h; }
        return h;
    };
    
    obj.toRGB = function() {
        var h = this.toHex();
        var s2i = function(start) {
            return parseInt(h.slice(start, start + 2), 16);
        };
   
        return [s2i(0), s2i(2), s2i(4)];
    };

    obj.toHtmlHex = function() {
        return '#' + this.toHex();
    };
    
    obj.toHtmlRGB = function() {
        var rgb = this.toRGB();
        return 'rgb(' + rgb[0] + ',' + rgb[1] + ',' + rgb[2] + ')';
    };

}(exports.Color.prototype));


/* ================================================================
  KomodoScheme
  An object for understanding Komodo theme files
  =============================================================== */

exports.Parser = function(config){ this.__init(config); };

(function(obj, undefined){
    
    
    
    obj.__init = function(config) {
        // config:
        //      rawData (string)
        //      path (string)
        
        this.booleans = {};
        this.commonStyles = {};
        this.langStyles = {};
        this.miscLangSettings = {};
        this.colors = {};
        this.indicators = {};
        
        this.__background = null;
        this.__primaryColors = [];

        if (config.rawData !== undefined) {
            this.loadFromRawData(config.rawData);
        } else if (config.path !== undefined) {
            this.loadFromFile(config.path);
        }
    };
    
    obj.__setVersion = function(v) {
        this.schemeVersion = v;  
    };
    
    obj.__parseV4 = function(data) {
        // console.log('parseV4', data);
    };
    
    obj.loadFromRawData = function(data) {        
        // Detect version
        var versionReg = new RegExp('Version(?: )?=(?: )?([456])');
        var match = versionReg.exec(data);
        if (match) {
            var version = parseInt(match[1], 10);
            log('version ', version);
            this.__setVersion(version);
            data = trim(data.replace(match[0], ''));
            
            if (version === 4) {
                this.__parseV4(data);
            }
        }
        
        return this;
    };
    
    obj.loadFromFile = function(path) {
        return this.loadFromRawData(fs.readFileSync(path, 'utf8'));
    };
    
    obj.getPrimaryColors = function(format) {
          
    };
    
    obj.getBackgroundColor = function(format) {
        
    };
    
    obj.toCSS = function(config) {
        // config :
        //      selectorPrefix (string)
        //      skipFontSize (bool)
        //      skipFontFamily (bool)
        //      format (ColorFormat)
        
    };
    
}(exports.Parser.prototype));
